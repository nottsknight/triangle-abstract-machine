use std::str::FromStr;

use crate::InstrData;

grammar;

pub Program = LblInstruction+;

LblInstruction: InstrData = {
    <lbl:Label> ":" <mut instr:Instruction> => {instr.label = Some(lbl); instr},
    Instruction
  }

Instruction = {
  Load, LoadA, LoadI, LoadL,
  Store, StoreI,
  Call, CallI, Return,
  Push, Pop,
  Jump, JumpI, JumpIf,
  Halt
  };

Load: InstrData = "load" <n:Num> "," <dr:Addr> => InstrData::new(0, dr.1, n as u8, dr.0);

LoadA: InstrData = "loada" <Addr> => InstrData::new(1, <>.1, 0, <>.0);

LoadI: InstrData = "loadi" <Num> => InstrData::new(2, 0, <> as u8, 0);

LoadL: InstrData = "loadl" <Num> => InstrData::new(3, 0, 0, <> as i16);

Store: InstrData = "store" <n:Num> "," <dr:Addr> => InstrData::new(4, dr.1, n as u8, dr.0);

StoreI: InstrData = "storei" <Num> => InstrData::new(5, 0, <> as u8, 0);

Call: InstrData = {
    "call" <Builtin> => InstrData::new(6, <>.1, 0, <>.0),
    "call" <n:Reg> "," <lbl:Label> => {
        let mut dat = InstrData::new(6, 0, n as u8, 0);
        dat.named_dest = Some(lbl);
        dat
      },
    "call" <n:Reg> "," <dr:Addr> => InstrData::new(6, dr.1, n as u8, dr.0),
  };

CallI: InstrData = "calli" => InstrData::new(7, 0, 0, 0);

Return: InstrData = "return" <n:Num> "," <d:Num> => InstrData::new(8, 0, n as u8, d as i16);

Push: InstrData = "push" <Num> => InstrData::new(10, 0, 0, <> as i16);

Pop: InstrData = "pop" <n:Num> "," <d:Num> => InstrData::new(11, 0, n as u8, d as i16);

Jump: InstrData = {
    "jump" <Addr> => InstrData::new(12, <>.1, 0, <>.0),
    "jump" <Label> => {
        let mut data = InstrData::new(12, 0, 0, 0);
        data.named_dest = Some(<>);
        data
    }
  };

JumpI: InstrData = "jumpi" => InstrData::new(13, 0, 0, 0);

JumpIf: InstrData = {
    "jumpif" <n:Num> "," <dr:Addr> => InstrData::new(14, dr.1, n as u8, dr.0),
    "jumpif" <n:Num> "," <lbl:Label> => {
        let mut data = InstrData::new(14, 0, n as u8, 0);
        data.named_dest = Some(lbl);
        data
      }
  };

Halt: InstrData = "halt" => InstrData::new(15, 0, 0, 0);

Addr: (i16, u8) = "[" <r:Reg> <d:Offset> "]" => (d as i16, r);

Offset: i16 = {
    "+" <Num> => <> as i16,
    "-" <Num> => (<> as i16) * -1,
  };

Builtin: (i16, u8) = {
    "id" => (1, 2),
    "not" => (2, 2),
    "and" => (3, 2),
    "or" => (4, 2),
    "inc" => (5, 2),
    "dec" => (6, 2),
    "neg" => (7, 2),
    "add" => (8, 2),
    "sub" => (9, 2),
    "mul" => (10, 2),
    "div" => (11, 2),
    "mod" => (12, 2),
    "lt" => (13, 2),
    "le" => (14, 2),
    "ge" => (15, 2),
    "gt" => (16, 2),
    "eq" => (17, 2),
    "ne" => (18, 2),
    "eol" => (19, 2),
    "eof" => (20, 2),
    "get" => (21, 2),
    "put" => (22, 2),
    "geteol" => (23, 2),
    "puteol" => (24, 2),
    "getint" => (25, 2),
    "putint" => (26, 2),
    "new" => (27, 2),
    "dispose" => (28, 2),
  };

Label: String = r"[a-z][a-z0-9_]*" => String::from(<>);

Num: u16 = {
    r"[0-9]+" => u16::from_str(<>).unwrap(),
    r"0x[0-9A-Fa-f]+" => u16::from_str_radix(&<>[2..], 16).unwrap(),
  };

Reg: u8 = {
    "cb" => 0,
    "ct" => 1,
    "pb" => 2,
    "pt" => 3,
    "sb" => 4,
    "st" => 5,
    "hb" => 6,
    "ht" => 7,
    "lb" => 8,
    "l1" => 9,
    "l2" => 10,
    "l3" => 11,
    "l4" => 12,
    "l5" => 13,
    "l6" => 14,
    "cp" => 15,
  };
